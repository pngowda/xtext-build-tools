pipeline {
  agent {
    kubernetes {
      label 'build-test-pod'
      defaultContainer 'xtext-buildenv'
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: 'eclipsecbi/jenkins-jnlp-agent'
            args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
            volumeMounts:
            - mountPath: /home/jenkins/.ssh
              name: volume-known-hosts
          - name: xtext-buildenv
            image: docker.io/smoht/xtext-buildenv:latest
            tty: true
          volumes:
          - configMap:
              name: known-hosts
            name: volume-known-hosts
    '''
    }
  }
  
  parameters {
    string(name: 'AUTHOR_NAME', description: 'Committer name (used for Git commits)')
    string(name: 'AUTHOR_EMAIL', description: 'Committer email address (used for Git commits)')
    string(name: 'SOURCE_BRANCH', defaultValue: 'master', description: 'Source Git Branch')
    string(name: 'TARGET_BRANCH', defaultValue: 'releng_set_version', description: 'Target Git Branch')
    string(name: 'NEW_XTEXT_VERSION', description: 'New Xtext version to set (major.minor.micro, without SNAPSHOT)')
    booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Dry run mode')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'2'))
    disableConcurrentBuilds()
  }

  stages {
    stage('Checkout') {
      steps {
          checkout scm
          script {
            def gitFunctions    = load 'build-tools/git_functions.groovy'
            
            // Check preconditions
            if (!AUTHOR_NAME?.trim() || !AUTHOR_EMAIL?.trim()) {
              currentBuild.result = 'ABORTED'
              error('Author required.')
            }
            if (TARGET_BRANCH == 'master') {
              currentBuild.result = 'ABORTED'
              error('TARGET_BRANCH \'master\' is disallowed...')
            }
            if (!NEW_XTEXT_VERSION?.matches('\\d\\.\\d+\\.\\d+')) {
              currentBuild.result = 'ABORTED'
              error("NEW_XTEXT_VERSION '${NEW_XTEXT_VERSION}' Invalid...")
            }

            def baseGitURL='git@github.com:eclipse'
            // list of Xtext repository names
            def repositoryNames = ['xtext-lib', 'xtext-core', 'xtext-extras', 'xtext-eclipse', 'xtext-xtend', 'xtext-maven', 'xtext-web', 'xtext-umbrella']
            
            // checkout source branch for each repository and create the target branch
            repositoryNames.each {
              dir(it) {
                git url: "${baseGitURL}/${it}.git", branch: SOURCE_BRANCH, credentialsId: CREDENTIAL_ID_GENIE_XTEXT_GITHUB
              }
              // When release branch already exists, then delete it and create a new one
              if (gitFunctions.branchExists(it, TARGET_BRANCH)){
                gitFunctions.deleteBranch(TARGET_BRANCH)
              }
              gitFunctions.createBranch(it, TARGET_BRANCH)
            }
          }
      }
    }

    stage('Modify') {
      steps {
        script {
          def gradle = load 'build-tools/gradle_functions.groovy'
          def FROM_VERSION = gradle.getXtextVersion()
          sh "sh build-tools/fixVersions.sh -f $FROM_VERSION -t $NEW_XTEXT_VERSION -b StoS"
        }
      }
    }
    
    stage('Commit & Push') {
      steps {
        script {
          // list of Xtext repository names
          def repositoryNames = ['xtext-lib', 'xtext-core', 'xtext-extras', 'xtext-eclipse', 'xtext-xtend', 'xtext-maven', 'xtext-web', 'xtext-umbrella']
          def git    = load 'build-tools/git_functions.groovy'
          
          repositoryNames.each {
            git.getGitChanges(it)
            git.commit(it, "[releng] Set version to ${NEW_XTEXT_VERSION}", AUTHOR_NAME, AUTHOR_EMAIL)
          }
        } // script
        
        //container ('jnlp') {
          script {
          def git    = load 'build-tools/git_functions.groovy'
          def repositoryNames = ['xtext-lib', 'xtext-core', 'xtext-extras', 'xtext-eclipse', 'xtext-xtend', 'xtext-maven', 'xtext-web', 'xtext-umbrella']
          if(!params.DRY_RUN){
            sshagent([CREDENTIAL_ID_GENIE_XTEXT_GITHUB]) {
              sh "echo pushing branch ${TARGET_BRANCH}"
              repositoryNames.each {
                git.pushGitChanges(it, TARGET_BRANCH, true)
              }
            }
          }
          }
        
        // }
      } // steps
    } // stage
  } // stages
}
